pipeline {
    agent any

    tools {
        maven 'Maven-3.9.10'
    }

    environment {
        MAVEN_HOME = tool 'Maven-3.9.10'
        SONAR_HOST = 'http://43.205.120.219:9000'
    }

    stages {

        stage('Build & SonarQube Scan') {
            steps {
                withCredentials([string(credentialsId: 'SonarToken', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        $MAVEN_HOME/bin/mvn clean verify sonar:sonar \
                          -Dsonar.projectKey=student-reg-webapp \
                          -Dsonar.host.url=$SONAR_HOST \
                          -Dsonar.token=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Stop Tomcat (Wait 10 sec)') {
            steps {
                sshagent(['Tomcat_Server']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ec2-user@172.31.37.173 "sudo systemctl stop tomcat"
                        echo "Waiting 10 seconds..."
                        sleep 10
                    '''
                }
            }
        }

        stage('Deploy WAR to Tomcat') {
            steps {
                sshagent(['Tomcat_Server']) {
                    sh '''
                        scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ec2-user@172.31.37.173:/opt/tomcat/webapps/
                    '''
                }
            }
        }

        stage('Start Tomcat') {
            steps {
                sshagent(['Tomcat_Server']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ec2-user@172.31.37.173 "sudo systemctl start tomcat"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment completed successfully.'

            // Optional: Slack notification on success
            slackSend(
                channel: '#deployments',
                color: 'good',
                message: "*Build Success:* `${env.JOB_NAME}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|View>)"
            )
        }

        failure {
            echo '❌ Deployment failed. Check logs.'

            // Optional: Slack notification on failure
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "*Build Failed:* `${env.JOB_NAME}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|View>)"
            )
        }

        always {
            node {
                cleanWs()
            }
        }
    }
}
